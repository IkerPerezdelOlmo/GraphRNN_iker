import argparse
import numpy as np
import os
import re
from random import shuffle

import eval.bilaketaHeuristikoak
import eval.stats
import utils
# import main.Args
from baselines.baseline_simple import *
import args

class Args_evaluate():
    def __init__(self):
        args = Args()
        # loop over the settings
        # self.model_name_all = ['GraphRNN_MLP','GraphRNN_RNN','Internal','Noise']
        # self.model_name_all = ['E-R', 'B-A']
        self.model_name_all = args.notes
        # self.model_name_all = ['Baseline_DGMG']

        # list of dataset to evaluate
        # use a list of 1 element to evaluate a single dataset
        self.dataset_name_all =args.datasets
        # self.dataset_name_all = ['citeseer_small','caveman_small']
        # self.dataset_name_all = ['barabasi_noise0','barabasi_noise2','barabasi_noise4','barabasi_noise6','barabasi_noise8','barabasi_noise10']
        # self.dataset_name_all = ['caveman_small', 'ladder_small', 'grid_small', 'ladder_small', 'enzymes_small', 'barabasi_small','citeseer_small']
        
        self.epoch_start=args.epochs_test_start
        self.epoch_end=args.epochs
        self.epoch_step=args.epoch_test_step
        self.simulatedAnnealing_args =args.simulatedAnnealing_args
        self.EDA_args = args.EDA_args









def evaluation(args_evaluate,dir_input, dir_output, model_name_all, dataset_name_all, args, overwrite = True):
    ''' Evaluate the performance of a set of models on a set of datasets.
    '''
    fname_output = dir_output+"ground_true2"+'.csv'
    evaluation_epoch(dir_input,fname_output,args,is_clean=True, epoch_start=args_evaluate.epoch_start,epoch_end=args_evaluate.epoch_end,epoch_step=args_evaluate.epoch_step)



def evaluation_epoch(dir_input,fname_output,args, is_clean=True, epoch_start=1000,epoch_end=3001,epoch_step=100):
    with open(fname_output, 'w+') as f:
        f.write('model_dataset;sample_time;epoch;degree_validate;clustering_validate;orbits4_validate;degree_test;clustering_test;orbits4_test;MIS_helburu_fn;MIS_helburu_fn_validate\n')

        # TODO: Maybe refactor into a separate file/function that specifies THE naming convention
        # across main and evaluate

        hidden = 64
        # read real graph
        fname_test = args.datasets[2]
        try:
            graph_test = create_graphs.create_datasetName(args.datasets[2], args)
        except Exception as e:
    # This will catch any exception that inherits from Exception
            print(f"An error occurred: {e}")
            print("graphRNN4")
            print('Not found: ' + fname_test)
            logging.warning('Not found: ' + fname_test)
            return None
        

        for i in graph_test[50:70]:
            print(i.number_of_nodes())
            print(nx.to_numpy_array(i).tolist())
            print(eval.bilaketaHeuristikoak.EDA_deia_emaitza_guztiak(args.EDA_args, i))
            print("\n \n")
  


def main():
    os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
    args = Args()
    args_evaluate = Args_evaluate()

    parser = argparse.ArgumentParser(description='Evaluation arguments.')
    feature_parser = parser.add_mutually_exclusive_group(required=False)
    feature_parser.add_argument('--export-real', dest='export', action='store_true')
    feature_parser.add_argument('--no-export-real', dest='export', action='store_false')
    feature_parser.add_argument('--kron-dir', dest='kron_dir', 
            help='Directory where graphs generated by kronecker method is stored.')

    parser.add_argument('--testfile', dest='test_file',
            help='The file that stores list of graphs to be evaluated. Only used when 1 list of '
                 'graphs is to be evaluated.')
    parser.add_argument('--dir-prefix', dest='dir_prefix',
            help='The file that stores list of graphs to be evaluated. Can be used when evaluating multiple'
                 'models on multiple datasets.')
    parser.add_argument('--graph-type', dest='graph_type',
            help='Type of graphs / dataset.')
    
    parser.set_defaults(export=False, kron_dir='', test_file='',
                        dir_prefix='',
                        graph_type=args.graph_type)
    prog_args = parser.parse_args()

    # dir_prefix = prog_args.dir_prefix
    # dir_prefix = "/dfs/scratch0/jiaxuany0/"
    dir_prefix = args.dir_input

    time_now = time.strftime("%Y-%m-%d_%H-%M-%S", gmtime())
    #time_now = strftime("%Y-%m-%d %H:%M:%S", gmtime())   

    evaluation(args_evaluate,dir_input=dir_prefix+"graphs/", dir_output=dir_prefix+"eval_results/",
                model_name_all=args_evaluate.model_name_all,dataset_name_all=args_evaluate.dataset_name_all,args=args,overwrite=True)



if __name__ == '__main__':
    main()